"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerMiddleware = void 0;
const core_1 = require("@midwayjs/core");
const fs_1 = require("fs");
const path_1 = require("path");
const swaggerExplorer_1 = require("./swaggerExplorer");
let SwaggerMiddleware = class SwaggerMiddleware {
    async init() {
        const { getAbsoluteFSPath } = (0, core_1.safeRequire)('swagger-ui-dist');
        if (getAbsoluteFSPath) {
            this.swaggerUiAssetPath = getAbsoluteFSPath();
        }
    }
    resolve(app) {
        if (app.getFrameworkType() === core_1.MidwayFrameworkType.WEB_EXPRESS) {
            return async (req, res, next) => {
                const pathname = req.path;
                if (!this.swaggerUiAssetPath ||
                    pathname.indexOf(this.swaggerConfig.swaggerPath) === -1) {
                    return next();
                }
                const arr = pathname.split('/');
                let lastName = arr.pop();
                if (lastName === 'index.json') {
                    res.send(this.swaggerExplorer.getData());
                    return;
                }
                if (!lastName) {
                    lastName = 'index.html';
                }
                let content = (0, fs_1.readFileSync)((0, path_1.join)(this.swaggerUiAssetPath, lastName));
                if (lastName === 'index.html' ||
                    lastName === 'swagger-initializer.js') {
                    content = content.toString('utf8');
                    content = this.replaceInfo(content);
                }
                const ext = (0, path_1.extname)(lastName);
                if (ext === '.js') {
                    res.type('application/javascript');
                }
                else if (ext === '.map') {
                    res.type('application/json');
                }
                else if (ext === '.css') {
                    res.type('text/css');
                }
                else if (ext === '.png') {
                    res.type('image/png');
                }
                res.send(content);
            };
        }
        else {
            return async (ctx, next) => {
                const pathname = ctx.path;
                if (!this.swaggerUiAssetPath ||
                    pathname.indexOf(this.swaggerConfig.swaggerPath) === -1) {
                    return next();
                }
                const arr = pathname.split('/');
                let lastName = arr.pop();
                if (lastName === 'index.json') {
                    ctx.body = this.swaggerExplorer.getData();
                    return;
                }
                if (!lastName) {
                    lastName = 'index.html';
                }
                let content = (0, fs_1.readFileSync)((0, path_1.join)(this.swaggerUiAssetPath, lastName));
                if (lastName === 'index.html' ||
                    lastName === 'swagger-initializer.js') {
                    content = content.toString('utf8');
                    content = this.replaceInfo(content);
                }
                const ext = (0, path_1.extname)(lastName);
                if (ext === '.js') {
                    ctx.set('Content-Type', 'application/javascript');
                }
                else if (ext === '.map') {
                    ctx.set('Content-Type', 'application/json');
                }
                else if (ext === '.css') {
                    ctx.set('Content-Type', 'text/css');
                }
                else if (ext === '.png') {
                    ctx.set('Content-Type', 'image/png');
                }
                ctx.body = content;
            };
        }
    }
    replaceInfo(content) {
        let str = `location.href.replace('${this.swaggerConfig.swaggerPath}/index.html', '${this.swaggerConfig.swaggerPath}/index.json'),\n validatorUrl: null,`;
        if (this.swaggerConfig.displayOptions) {
            Object.keys(this.swaggerConfig.displayOptions).forEach(key => {
                str += `\n${key}: ${this.swaggerConfig.displayOptions[key]},`;
            });
        }
        return content.replace('"https://petstore.swagger.io/v2/swagger.json",', str);
    }
    static getName() {
        return 'swagger';
    }
};
__decorate([
    (0, core_1.Config)('swagger'),
    __metadata("design:type", Object)
], SwaggerMiddleware.prototype, "swaggerConfig", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", swaggerExplorer_1.SwaggerExplorer)
], SwaggerMiddleware.prototype, "swaggerExplorer", void 0);
__decorate([
    (0, core_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SwaggerMiddleware.prototype, "init", null);
SwaggerMiddleware = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], SwaggerMiddleware);
exports.SwaggerMiddleware = SwaggerMiddleware;
//# sourceMappingURL=swaggerMiddleware.js.map